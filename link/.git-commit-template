# <type>[optional scope]: <subject>
# |<----  Using a Maximum Of 50 Characters  ---->|


# [optional body]
# |<----   Try To Limit Each Line to a Maximum of 72 Characters   ---->|

# [optional references]

# [Optional Footer]
#
#
# --- COMMIT END ---
# Type can be 
#    feat     (new feature)
#    fix      (bug fix)
#    refactor (refactoring production code)
#    style    (formatting, missing semi colons, etc; no code change)
#    docs     (changes to documentation)
#    test     (adding or refactoring tests; no production code change)
#    chore    (updating grunt tasks etc; no production code change)
#    perf     (code change that improves performance)
# --------------------
# - Type and subject are required, all else is optional
# - Scope can be used to define a subsection of the project
#   - this should be defined by the project
# - References should denote tickets, articles or other resources
#   - Example: Gitlab #23 or Hive #229
# - BREAKING CHANGE: a commit that has a footer BREAKING CHANGE:, 
#   or appends a ! after the type/scope, introduces a breaking API change
#   (correlating with MAJOR in semantic versioning).
#   A BREAKING CHANGE can be part of commits of any type.
# --------------------
# Remember to
#   - Capitalize the subject line
#   - Use the imperative mood in the subject line
#       - "Add dogs" (good) vs. "Added dogs" (bad)
#   - Do not end the subject line with a period
#   - Separate subject from body with a blank line
#   - Use the body to explain what and why vs. how
#   - Can use multiple lines with "-" for bullet points in body
# --------------------
# Based off Conventional Commits:
# https://www.conventionalcommits.org
